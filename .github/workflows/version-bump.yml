
name: Auto Version Bump

on:
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  version-bump:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install uv
      uses: astral-sh/setup-uv@v3
      
    - name: Configure git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
    
    - name: Determine bump type
      id: bump_type
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "type=${{ github.event.inputs.bump_type }}" >> $GITHUB_OUTPUT
        else
          # Use PR title for bump type, require it to start with major, minor, or patch
          PR_TITLE="${{ github.event.pull_request.title }}"
          echo "PR title: $PR_TITLE"
          if echo "$PR_TITLE" | grep -iE '^major'; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -iE '^minor'; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif echo "$PR_TITLE" | grep -iE '^patch'; then
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "::error::PR title must start with 'major', 'minor', or 'patch' (case-insensitive)." >&2
            exit 1
          fi
        fi
    
    - name: Check if version already bumped
      id: check_version
      run: |
        CURRENT_VERSION=$(uv version --short)
        echo "Current version: $CURRENT_VERSION"

        # Get list of commits in PR â€” including base
        COMMITS=$(git rev-list --format=%B --no-merges ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }})

        echo "$COMMITS" | grep -q "Bump version to $CURRENT_VERSION" && \
          echo "already_bumped=true" >> $GITHUB_OUTPUT || \
          echo "already_bumped=false" >> $GITHUB_OUTPUT

    - name: Bump version
      if: steps.check_version.outputs.already_bumped == 'false'
      run: |
        uv version --bump ${{ steps.bump_type.outputs.type }}
        NEW_VERSION=$(uv version --short)
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

    - name: Commit version bump
      if: steps.check_version.outputs.already_bumped == 'false'
      run: |
        git add pyproject.toml
        git commit -m "Bump version to $NEW_VERSION" || exit 0
        git tag "v$NEW_VERSION"
        git push origin "HEAD:refs/heads/${{ github.head_ref }}"
        git push origin "v$NEW_VERSION"
